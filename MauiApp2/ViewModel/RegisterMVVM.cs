using System.Collections.ObjectModel;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using CommunityToolkit.Mvvm.ComponentModel;
using MauiApp2.Model.RegisterCourseModel;
using MauiApp2.Model.StudentNamespace;
using Microsoft.Maui.Storage;

namespace MauiApp2.ViewModel
{
	public partial class RegisterCourseViewModel : ObservableObject
	{
		[ObservableProperty]
		private ObservableCollection<Subject> registeredSubjects = new();
		private List<Student> students;


		public RegisterCourseViewModel()
		{
		}

		public async Task LoadRegisterCoursesAsync(string studentEmail)
		{
			try
			{
				System.Diagnostics.Debug.WriteLine("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î students.json ‡πÅ‡∏•‡∏∞ registrations.json...");

				// ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏≤‡∏Å students.json
				using var studentStream = await FileSystem.OpenAppPackageFileAsync("students.json");
				using var studentReader = new StreamReader(studentStream);
				var studentJson = await studentReader.ReadToEndAsync();

				students = JsonSerializer.Deserialize<List<Student>>(studentJson);

				if (students == null || students.Count == 0)
				{
					System.Diagnostics.Debug.WriteLine("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô!");
					return;
				}

				// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏≤‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•
				var studentData = students.FirstOrDefault(s => s.Email == studentEmail);

				if (studentData == null)
				{
					System.Diagnostics.Debug.WriteLine($"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: {studentEmail}");
					return;
				}

				string studentId = studentData.StudentId; // ‡πÑ‡∏î‡πâ studentId ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß

				System.Diagnostics.Debug.WriteLine($"‚úÖ ‡∏û‡∏ö StudentId: {studentId} ‡∏à‡∏≤‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏• {studentEmail}");

				// ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏à‡∏≤‡∏Å registrations.json
				using var registerStream = await FileSystem.OpenAppPackageFileAsync("registrations.json");
				using var registerReader = new StreamReader(registerStream);
				var registerJson = await registerReader.ReadToEndAsync();

				var allRegistrations = JsonSerializer.Deserialize<List<RegisterCourseModel>>(registerJson);

				if (allRegistrations == null || allRegistrations.Count == 0)
				{
					System.Diagnostics.Debug.WriteLine("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ß‡∏¥‡∏ä‡∏≤!");
					return;
				}

				// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
				var studentRegistration = allRegistrations.FirstOrDefault(r => r.StudentId == studentId);

				if (studentRegistration == null || studentRegistration.RegisteredCourses.Count == 0)
				{
					System.Diagnostics.Debug.WriteLine("‚ùå ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ß‡∏¥‡∏ä‡∏≤!");
					return;
				}

				System.Diagnostics.Debug.WriteLine($"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö StudentId: {studentId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");

				// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï registeredSubjects ‡∏ö‡∏ô Main Thread
				MainThread.BeginInvokeOnMainThread(() =>
				{
					registeredSubjects.Clear(); // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å

					foreach (var course in studentRegistration.RegisteredCourses)
					{
						foreach (var subject in course.Subjects)
						{
							System.Diagnostics.Debug.WriteLine($"üìö ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤: {subject.SubjectName}, ‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤: {subject.SubjectId}");
							registeredSubjects.Add(subject);
						}
					}
				});
			}
			catch (Exception ex)
			{
				System.Diagnostics.Debug.WriteLine($"‚ùå Error loading courses: {ex.Message}");
			}
		}
	}
}
